def tf_path = "codeonline/terraform/vm_img"

pipeline {
    agent { label 'gcp-agent' }

    options {
        timestamps()
    }

    environment {
        ENV_INVENTORY = "${env.WORKSPACE}/${run_id}/codeonline/inventory"
    }

    parameters {
        string(name: 'dev_repo', defaultValue: "https://github.com/avishka2k/codeonline.git", description: 'dev repo')
        string(name: 'dev_branch', defaultValue: "main_dev", description: 'dev branch')
        string(name: 'root_dir', defaultValue: "app/client", description: 'root dir| ex: app/client')
        string(name: 'version', defaultValue: "v1", description: 'app version')
        string(name: 'run_id', defaultValue: "${currentBuild.startTimeInMillis}", description: 'Auto Generated Unique Value to Tag Resources - Do Not Change')
    }

    stages {
        stage('Checkout Main Branch') {
            steps {
                dir("${run_id}/codeonline"){
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/avishka2k/codeonline-infra.git', credentialsId: "github-token"]]
                    ])
                }   
            }
        }

        stage('Checkout Config File') {
            steps {
                script {
                    def props = readProperties file: "${env.WORKSPACE}/${run_id}/codeonline/configs.properties"
                    for (p in props) {
                        env."${p.key}" = "${p.value}"
                    }
                    
                    sh script: """
                        echo "${props.name}"
                    """
                }        
            }
        }

        stage('Checkout Dev Branch') {
            steps {
                dir("${run_id}/dev"){
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: "${params.dev_branch}"]],
                        userRemoteConfigs: [[url: "${params.dev_repo}", credentialsId: "github-token"]]
                    ])
                }   
            }
        }

        stage('Deployt to app engine') {
            steps {
                script {
                    sh script: """
                        cd "${run_id}/codeonline/ansible"
                        export ANSIBLE_CONFIG=ansible.cfg
                        ansible-playbook app-engine.yml --extra-vars 'workspace=${env.WORKSPACE} runid=${params.run_id} root_dir=${params.root_dir} version=${params.version}'
                    """
                }
            }
        }
    }

    post { 
        always { 
            script {
                input('continue')
                
            }           
            deleteDir()
        }
    }
}